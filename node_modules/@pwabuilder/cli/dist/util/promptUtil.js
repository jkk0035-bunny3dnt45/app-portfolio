"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptsCancel = exports.runSpinnerGroup = void 0;
const prompts = __importStar(require("@clack/prompts"));
const util_1 = require("./util");
const SPINNER_EVENT_NAME_LIST = ['SIGINT', 'SIGTERM', 'exit'];
const DEFAULT_CANCEL_MESSAGE = `Command failed due to error.`;
async function runSpinnerGroup(spinnerItems, cancelMessage) {
    const promptSpinner = prompts.spinner();
    for (const spinnerItem of spinnerItems) {
        promptSpinner.start(spinnerItem.startText);
        (0, util_1.replaceProcessEventListeners)(SPINNER_EVENT_NAME_LIST, () => {
            if (spinnerItem.onCancel) {
                spinnerItem.onCancel();
            }
            promptSpinner.stop(spinnerItem.stopMessage);
            promptsCancel(cancelMessage);
        });
        await spinnerItem.functionToRun();
        promptSpinner.stop(spinnerItem.endText);
    }
    (0, util_1.removeProcessEventListeners)(SPINNER_EVENT_NAME_LIST);
}
exports.runSpinnerGroup = runSpinnerGroup;
function promptsCancel(message) {
    const _message = message ?? DEFAULT_CANCEL_MESSAGE;
    prompts.cancel(_message);
    process.exit(0);
}
exports.promptsCancel = promptsCancel;
//# sourceMappingURL=promptUtil.js.map