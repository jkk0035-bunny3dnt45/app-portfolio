"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decompressZip = exports.fetchZip = exports.fetchZipAndDecompress = exports.doesStringExistInFile = exports.doesFileExist = exports.createFileAndWrite = exports.renameDirectory = exports.removeAll = exports.removeDirectory = exports.replaceInFileList = exports.replaceAllInFile = exports.FETCHED_ZIP_NAME_STRING = exports.DECOMPRESSED_NAME_STRING = void 0;
var fs = require('fs');
const decompress = require('decompress');
const node_fetch_1 = __importDefault(require("node-fetch"));
const node_stream_1 = require("node:stream");
const node_util_1 = require("node:util");
exports.DECOMPRESSED_NAME_STRING = 'decompressedZip';
exports.FETCHED_ZIP_NAME_STRING = 'fetchedZip.zip';
function replaceAllInFile(filePath, replaceString, newString) {
    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            return console.log(err);
        }
        var result = data.replaceAll(replaceString, newString);
        fs.writeFile(filePath, result, 'utf8', (err) => {
            if (err) {
                return console.log(err);
            }
        });
    });
}
exports.replaceAllInFile = replaceAllInFile;
function replaceInFileList(listOfFilePaths, replaceString, newString, directory = '.') {
    const replaceInFileWrapper = (filePath) => {
        replaceAllInFile(directory + "/" + filePath, replaceString, newString);
    };
    listOfFilePaths.map(replaceInFileWrapper);
}
exports.replaceInFileList = replaceInFileList;
function removeDirectory(directoryName) {
    fs.rmSync(directoryName, { recursive: true, force: true });
}
exports.removeDirectory = removeDirectory;
function removeAll(filenames) {
    for (let filename of filenames) {
        removeDirectory(filename);
    }
}
exports.removeAll = removeAll;
function renameDirectory(oldName, newName) {
    fs.renameSync(oldName, newName);
}
exports.renameDirectory = renameDirectory;
function createFileAndWrite(filepath, content) {
    fs.writeFileSync(filepath, content ? content : "");
}
exports.createFileAndWrite = createFileAndWrite;
function doesFileExist(filepath) {
    return fs.existsSync(filepath);
}
exports.doesFileExist = doesFileExist;
function doesStringExistInFile(filePath, searchString) {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    return fileContent.includes(searchString);
}
exports.doesStringExistInFile = doesStringExistInFile;
async function fetchZipAndDecompress(url) {
    await fetchZip(url);
    await decompressZip();
}
exports.fetchZipAndDecompress = fetchZipAndDecompress;
async function fetchZip(url) {
    const streamPipeline = (0, node_util_1.promisify)(node_stream_1.pipeline);
    const res = await (0, node_fetch_1.default)(url);
    if (res.body) {
        await streamPipeline(res.body, fs.createWriteStream(exports.FETCHED_ZIP_NAME_STRING));
    }
}
exports.fetchZip = fetchZip;
async function decompressZip() {
    await decompress(exports.FETCHED_ZIP_NAME_STRING, exports.DECOMPRESSED_NAME_STRING);
    removeDirectory(exports.FETCHED_ZIP_NAME_STRING);
}
exports.decompressZip = decompressZip;
//# sourceMappingURL=fileUtil.js.map