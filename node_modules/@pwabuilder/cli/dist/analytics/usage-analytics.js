"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackStartEventWrapper = exports.trackBuildEventWrapper = exports.trackCreateEventWrapper = exports.trackErrorWrapper = exports.createUserDataAndWrite = exports.trackException = exports.trackEvent = exports.getAnalyticsClient = exports.initAnalytics = void 0;
const applicationinsights_1 = require("applicationinsights");
const flags_1 = require("../flags");
const crypto = __importStar(require("crypto"));
const os = __importStar(require("os"));
const fs = __importStar(require("fs"));
const fileUtil_1 = require("../util/fileUtil");
const child_process_1 = require("child_process");
const path = require('node:path');
function initAnalytics() {
    try {
        if ((0, flags_1.getFlag)("analytics") === true) {
            (0, applicationinsights_1.setup)("InstrumentationKey=aa9a5f75-4ed8-4be7-8fc5-5626193d8446;IngestionEndpoint=https://westus2-2.in.applicationinsights.azure.com/;LiveEndpoint=https://westus2.livediagnostics.monitor.azure.com/")
                .setAutoDependencyCorrelation(false)
                .setAutoCollectRequests(false)
                .setAutoCollectPerformance(false, false)
                .setAutoCollectDependencies(false)
                .setAutoCollectConsole(false)
                .setUseDiskRetryCaching(false)
                .start();
            addUserIDtoTelemetry(getUserID());
        }
    }
    catch (err) {
        console.error("Error initializing analytics", err);
    }
}
exports.initAnalytics = initAnalytics;
function getAnalyticsClient() {
    return applicationinsights_1.defaultClient;
}
exports.getAnalyticsClient = getAnalyticsClient;
function trackEvent(name, properties) {
    try {
        if ((0, flags_1.getFlag)("analytics") === true) {
            applicationinsights_1.defaultClient.trackEvent({
                name,
                properties
            });
        }
    }
    catch (err) {
        console.error("Error tracking event", err);
        throw new Error(`Error tracking event: ${err}`);
    }
}
exports.trackEvent = trackEvent;
function trackException(err) {
    try {
        if ((0, flags_1.getFlag)("analytics") === true) {
            applicationinsights_1.defaultClient.trackException({
                exception: err
            });
        }
    }
    catch (err) {
        console.error("Error tracking exception", err);
        throw new Error(`Error tracking exception: ${err}`);
    }
}
exports.trackException = trackException;
function getUserID() {
    const pwabuilderDataFilePath = os.homedir() + "/.pwabuilder";
    var userId = "";
    if ((0, fileUtil_1.doesFileExist)(pwabuilderDataFilePath)) {
        const userData = JSON.parse(fs.readFileSync(pwabuilderDataFilePath, { encoding: 'utf-8' }));
        userId = userData.user.id;
    }
    else {
        userId = createUserDataAndWrite(pwabuilderDataFilePath).user.id;
    }
    return userId;
}
function createUserDataAndWrite(path) {
    const userId = crypto.randomUUID();
    const newUserData = {
        user: {
            id: userId
        }
    };
    fs.writeFileSync(path, JSON.stringify(newUserData), { encoding: 'utf-8' });
    return newUserData;
}
exports.createUserDataAndWrite = createUserDataAndWrite;
function addUserIDtoTelemetry(id) {
    applicationinsights_1.defaultClient.addTelemetryProcessor((envelope, context) => {
        envelope["tags"]['ai.user.id'] = id;
        return true;
    });
}
function spawnAnalyticsProcess(event, properties) {
    const logPath = path.resolve(__dirname, 'out.log');
    const out = fs.openSync(logPath, 'a');
    const err = fs.openSync(logPath, 'a');
    const child = (0, child_process_1.spawn)('node', resolveNodeSpawnArgs(event, properties), {
        detached: true,
        stdio: ['ignore', out, err]
    });
    child.on('error', (err) => {
        trackException(err);
    });
    child.unref();
}
function resolveNodeSpawnArgs(event, properties) {
    const scriptPath = path.resolve(__dirname, 'track-events.js');
    return properties ? [scriptPath, event, JSON.stringify(properties)] : [scriptPath, event];
}
function trackErrorWrapper(_error) {
    spawnAnalyticsProcess('error', { error: _error });
}
exports.trackErrorWrapper = trackErrorWrapper;
function trackCreateEventWrapper(createEventData) {
    spawnAnalyticsProcess('create', createEventData);
}
exports.trackCreateEventWrapper = trackCreateEventWrapper;
function trackBuildEventWrapper() {
    spawnAnalyticsProcess('build');
}
exports.trackBuildEventWrapper = trackBuildEventWrapper;
function trackStartEventWrapper() {
    spawnAnalyticsProcess('start');
}
exports.trackStartEventWrapper = trackStartEventWrapper;
//# sourceMappingURL=usage-analytics.js.map